#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C)
#     2019-2020 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
"""Python wrapper for rsync to easily configure rsync.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import gzip
import logging
import os
import re
import shlex
import socket
import subprocess
import sys
import time

from argparse import ArgumentParser, RawTextHelpFormatter
from lxml import etree
from math import ceil, floor
from threading import Thread
from typing import Dict, List, Optional, Set, Tuple, Type, TypeVar, Union

try:
    import notify2
except ImportError as e:
    pass

__author__ = 'J. Nathanael Philipp (jnphilipp)'
__email__ = 'nathanael@philipp.land'
__license__ = 'GPLv3'
__version__ = '0.2.6'
__github__ = 'https://github.com/jnphilipp/psync'


NAMESPACE = {'p': 'http://jnphilipp.org/psync/'}


class Database():
    T = TypeVar('T', bound='Database')

    def __init__(self, name: str, user: str, password: Optional[str] = None,
                 passwordstore: Optional[str] = None,
                 options: Optional[str] = None, ssh: Optional[str] = None,
                 target: Optional[str] = None):
        self._name = name
        self._user = user
        self._password = password
        self._passwordstore = passwordstore
        self._options = options
        self._ssh = ssh
        self._target = target

    @property
    def name(self) -> str:
        return self._name

    @name.setter
    def name(self, value: str):
        self._name = value

    @property
    def user(self) -> str:
        return self._user

    @user.setter
    def user(self, value: str):
        self._user = value

    @property
    def password(self) -> Optional[str]:
        return self._password

    @password.setter
    def password(self, value: Optional[str]):
        self._password = value

    @property
    def passwordstore(self) -> Optional[str]:
        return self._passwordstore

    @passwordstore.setter
    def passwordstore(self, value: Optional[str]):
        self._passwordstore = value

    @property
    def options(self) -> Optional[str]:
        return self._options

    @options.setter
    def options(self, value: Optional[str]):
        self._options = value

    @property
    def ssh(self) -> Optional[str]:
        return self._ssh

    @ssh.setter
    def ssh(self, value: Optional[str]):
        self._ssh = value

    @property
    def ssh(self) -> Optional[str]:
        return self._ssh

    @ssh.setter
    def ssh(self, value: Optional[str]):
        self._ssh = value

    @property
    def target(self) -> Optional[str]:
        return self._target

    @target.setter
    def target(self, value: Optional[str]):
        self._target = value

    @classmethod
    def from_xml(cls: Type[T], e: etree.Element,
                 default_target: Optional[str]) -> T:
        db = cls(e.find('p:name', namespaces=NAMESPACE).text.strip(),
                 e.find('p:user', namespaces=NAMESPACE).text.strip())

        if e.find('p:password', namespaces=NAMESPACE) is not None:
            db.password = e.find('p:password',
                                 namespaces=NAMESPACE).text.strip()
        if e.find('p:pass', namespaces=NAMESPACE) is not None:
            db.passwordstore = e.find('p:pass',
                                      namespaces=NAMESPACE).text.strip()
        if e.find('p:target', namespaces=NAMESPACE) is not None:
            db.target = e.find('p:target', namespaces=NAMESPACE).text.strip()
        else:
            db.target = default_target
        if e.find('p:options', namespaces=NAMESPACE) is not None:
            db.options = e.find('p:options', namespaces=NAMESPACE).text.strip()
        if e.find('p:ssh', namespaces=NAMESPACE) is not None:
            db.ssh = e.find('p:ssh', namespaces=NAMESPACE).text.strip()

        return db

    def _pass(self) -> Optional[str]:
        if self.passwordstore is None:
            return None

        logging.debug(f'Get password {self.passwordstore} from pass.')
        pobj = subprocess.Popen(['pass', self.passwordstore],
                                stdout=subprocess.PIPE)
        return pobj.communicate()[0].decode('utf-8').split('\n')[0]

    def cmd(self) -> List[str]:
        pass

    def backup(self):
        pass


class PostgreSQL(Database):
    def __init__(self, name: str, user: str, password: Optional[str] = None,
                 passwordstore: Optional[str] = None,
                 options: Optional[str] = None, ssh: Optional[str] = None,
                 target: Optional[str] = None):
        super(PostgreSQL, self).__init__(name, user, password, passwordstore,
                                         options, ssh, target)

    def build_command_args(self) -> List[str]:
        if self.passwordstore is not None and self.ssh is not None:
            password = self._pass()
        elif self.password is not None and self.ssh is not None:
            password = self.password
        else:
            password = None

        if self.ssh is None:
            args: List[str] = []
        elif password is None:
            args = ['ssh', self.ssh]
        else:
            args = ['ssh', self.ssh, f'PGPASSWORD={password}']
        args.append('pg_dump')
        args.append(f'--username={self.user}')
        if self.options is not None:
            args += self.options.split(' ')
        args.append(self.name)
        return args

    def backup(self):
        if self.passwordstore is not None and self.ssh is None:
            env = {'PGPASSWORD': self._pass()}
        elif self.password is not None and self.ssh is None:
            env = {'PGPASSWORD': self.password}
        else:
            env = {}

        args = self.build_command_args()
        cmd = '" "'.join(['PGPASSWORD' if a.startswith('PGPASSWORD') else a
                          for a in args])
        logging.info(f'Dumping PostgreSQL database {self.name}.')
        print(f'Dumping PostgreSQL database {self.name}.')
        logging.debug(f'Running PostgreSQL command: "{cmd}"')

        pobj = subprocess.Popen(args, stdout=subprocess.PIPE, env=env,
                                stderr=subprocess.PIPE, encoding='utf8')
        stdout, stderr = pobj.communicate()

        if pobj.returncode == 0:
            hostname = self.ssh if self.ssh is not None \
                else socket.gethostname()
            path = os.path.join(hostname, 'db-dumps', 'PostgreSQL', self.name)
            if self.target is not None:
                path = os.path.join(self.target, path)
            if not os.path.exists(path):
                os.makedirs(path)

            path = os.path.join(path, f'{self.name}_{timestamp()}.sql.gz')
            logging.debug(f'Storing {self.name} dump in {path}.')
            with gzip.open(path, 'wt', encoding='utf8') as f:
                f.write(stdout)
        else:
            logging.error(f'PostgreSQL {self.name} dump failed.')
            logging.error(stderr.strip())
            print(f'MySQL {self.name} dump failed.', file=sys.stderr)
            print(stderr.strip(), file=sys.stderr)


class MySQL(Database):
    def __init__(self, name: str, user: str, password: Optional[str] = None,
                 passwordstore: Optional[str] = None,
                 options: Optional[str] = None, ssh: Optional[str] = None,
                 target: Optional[str] = None):
        super(MySQL, self).__init__(name, user, password, passwordstore,
                                    options, ssh, target)

    def build_command_args(self) -> List[str]:
        if self.passwordstore is not None and self.ssh is not None:
            password = self._pass()
        elif self.password is not None and self.ssh is not None:
            password = self.password
        else:
            password = None

        if self.ssh is None:
            args: List[str] = []
        elif password is None:
            args = ['ssh', self.ssh]
        else:
            args = ['ssh', self.ssh, f'MYSQL_PWD={password}']
        args.append('mysqldump')
        args.append(f'--user={self.user}')
        if self.options is not None:
            args += self.options.split(' ')
        args.append(self.name)
        return args

    def backup(self):
        if self.passwordstore is not None and self.ssh is None:
            env = {'MYSQL_PWD': self._pass()}
        elif self.password is not None and self.ssh is None:
            env = {'MYSQL_PWD': self.password}
        else:
            env = {}

        args = self.build_command_args()
        cmd = '" "'.join(['MYSQL_PWD' if a.startswith('MYSQL_PWD') else a
                          for a in args])
        logging.info(f'Dumping MySQL database {self.name}.')
        print(f'Dumping MySQL database {self.name}.')
        logging.debug(f'Running MySQL command: "{cmd}"')

        pobj = subprocess.Popen(args, stdout=subprocess.PIPE, env=env,
                                stderr=subprocess.PIPE, encoding='utf8')
        stdout, stderr = pobj.communicate()

        if pobj.returncode == 0:
            hostname = self.ssh if self.ssh is not None \
                else socket.gethostname()
            path = os.path.join(hostname, 'db-dumps', 'MySQL', self.name)
            if self.target is not None:
                path = os.path.join(self.target, path)
            if not os.path.exists(path):
                os.makedirs(path)

            path = os.path.join(path, f'{self.name}_{timestamp()}.sql.gz')
            logging.debug(f'Storing {self.name} dump in {path}.')
            with gzip.open(path, 'wt', encoding='utf8') as f:
                f.write(stdout)
        else:
            logging.error(f'MySQL {self.name} dump failed.')
            logging.error(stderr.strip())
            print(f'MySQL {self.name} dump failed.', file=sys.stderr)
            print(stderr.strip(), file=sys.stderr)


class Script:
    T = TypeVar('T', bound='Script')

    def __init__(self, path: str):
        self._path = path

    @property
    def path(self) -> str:
        return self._path

    @path.setter
    def path(self, value: str):
        self._path = value

    def build_command_args(self) -> List[str]:
        return shlex.split(self.path)

    def run(self):
        def log(stream, logger, writer):
            while True:
                line = stream.readline().decode()
                if line:
                    logger(line.split('\r')[-1].rstrip())
                    print(line, end='', file=writer)
                else:
                    break

        args = self.build_command_args()
        cmd = '" "'.join(args)
        logging.debug(f'Running: "{cmd}"')

        pobj = subprocess.Popen(args, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)

        t_stdout = Thread(target=log, args=(pobj.stdout, logging.info,
                                            sys.stdout))
        t_stderr = Thread(target=log, args=(pobj.stderr, logging.error,
                                            sys.stderr))

        t_stdout.start()
        t_stderr.start()

        while t_stdout.is_alive() and t_stderr.is_alive():
            pass
        pobj.wait()

        logging.info('')
        logging.info('')
        logging.info('')
        print('\n\n')


class Source(Script):
    T = TypeVar('T', bound='Source')

    def __init__(self, path: str, target: str, excludes: Set[str] = set(),
                 as_root: bool = False, rsync_config: Optional[str] = None,
                 pre_script: Optional[Script] = None,
                 post_script: Optional[Script] = None):
        super(Source, self).__init__(path)
        self._target = target
        self._excludes = excludes
        self._as_root = as_root
        self._rsync_config = rsync_config
        self._pre_script = pre_script
        self._post_script = post_script

    @property
    def hostname(self):
        match = re.match(r'^([^/]+@)?[^/]+:', self.path)
        if match:
            return match.group(0)[:-1]
        else:
            return socket.gethostname()

    @property
    def target(self) -> str:
        return self._target

    @target.setter
    def target(self, value: str):
        self._target = value

    @property
    def excludes(self) -> Set[str]:
        return self._excludes

    @excludes.setter
    def excludes(self, value: Set[str]):
        self._excludes = value

    @property
    def as_root(self) -> bool:
        return self._as_root

    @as_root.setter
    def as_root(self, value: bool):
        self._as_root = value

    @property
    def rsync_config(self) -> Optional[str]:
        return self._rsync_config

    @rsync_config.setter
    def rsync_config(self, value: Optional[str]):
        self._rsync_config = value

    @property
    def pre_script(self) -> Optional[Script]:
        return self._pre_script

    @pre_script.setter
    def pre_script(self, value: Optional[Script]):
        self._pre_script = value

    @property
    def post_script(self) -> Optional[Script]:
        return self._post_script

    @post_script.setter
    def post_script(self, value: Optional[Script]):
        self._post_script = value

    @classmethod
    def from_xml(cls: Type[T], e: etree.Element, default_target: Optional[str],
                 default_rsync_config: Optional[str],
                 default_as_root: bool) -> T:
        path = e.find('p:path', namespaces=NAMESPACE).text.strip()
        if e.find('p:target', namespaces=NAMESPACE) is not None:
            source = cls(path, e.find('p:target',
                                      namespaces=NAMESPACE).text.strip())
        elif default_target is not None:
            source = cls(path, default_target)
        else:
            print(f'No target for source {path}.', file=sys.stderr)
            sys.exit(1)

        if e.find('p:exclude', namespaces=NAMESPACE) is not None:
            excludes = set()
            for exclude in e.iterfind('p:exclude', namespaces=NAMESPACE):
                excludes.add(exclude.text.strip())
            source.excludes = excludes

        if e.find('p:rsync', namespaces=NAMESPACE) is not None:
            e = e.find('p:rsync', namespaces=NAMESPACE)
            source.rsync_config = e.text.strip()
            if 'root' in e.attrib:
                source.as_root = e.attrib['root'].strip()
        else:
            source.rsync_config = default_rsync_config
            source.as_root = default_as_root

        if e.find('p:pre_script', namespaces=NAMESPACE) is not None:
            path = e.find('p:pre_script', namespaces=NAMESPACE).text.strip()
            source.pre_script = Script(path)

        if e.find('p:post_script', namespaces=NAMESPACE) is not None:
            path = e.find('p:post_script', namespaces=NAMESPACE).text.strip()
            source.post_script = Script(path)

        return source

    def build_command_args(self) -> List[str]:
        match = re.match(r'^([^/]+@)?[^/]+:', self.path)
        if match:
            print(f'Remote source {self.path}.')
            logging.info(f'Remote source {self.path}.')
            path = re.sub(r'^([^/]+@)?[^/]+:', '', self.path)
        else:
            print(f'Local source {self.path}.')
            logging.info(f'Local source {self.path}.')
            if os.path.isdir(self.path):
                path = self.path
            else:
                path = os.path.dirname(self.path)
        if path.startswith('/'):
            path = path[1:]

        target = os.path.join(self.target, self.hostname, 'files', path)
        backup_dir = os.path.join(self.target, self.hostname, 'backup', path)

        if not os.path.exists(target):
            os.makedirs(target)

        if os.path.isdir(self.path) and not self.path.endswith('/'):
            self.path += '/'

        cmd = ['rsync']
        if self.as_root:
            cmd = ['sudo'] + cmd
        if self.rsync_config is not None:
            if '--backup-dir=%s' in self.rsync_config:
                cmd += shlex.split(self.rsync_config % f'"{backup_dir}"')
            else:
                cmd += shlex.split(self.rsync_config)
        for exclude in self.excludes:
            cmd += [f'--exclude={exclude}']
        return cmd + [self.path, target]

    def backup(self):
        if self.pre_script is not None:
            logging.info(f'Run pre-script {self.pre_script.path}.')
            self.pre_script.run()
        self.run()
        if self.post_script is not None:
            logging.info(f'Run post-script {self.post_script.path}.')
            self.post_script.run()


def center_text(text: str, width: int = 41) -> str:
    return f'{" " * floor((width - len(text)) / 2)}{text}' + \
        f'{" " * ceil((width - len(text)) / 2)}'


def to_bool(string: str, default: bool = False) -> bool:
    if string == '1' or string == 'yes' or string == 'true' or string == 'on':
        return True
    elif string == '0' or string == 'no' or string == 'false' or \
            string == 'off':
        return False
    else:
        return default


def send_notification(msg):
    try:
        n = notify2.Notification('psync', msg, 'psync')
        n.show()
    except NameError as e:
        pass


def timestamp() -> str:
    return time.strftime('%Y%m%dT%H%M%S%z', time.localtime())


def load(path: str) -> etree.ElementTree:
    if not os.path.exists(path):
        print(f'XML file "{path}" not found.', file=sys.stderr)
        sys.exit(1)
    logging.debug(f'Parsing XML file "{path}".')
    return etree.parse(path)


def check_valid(path: str, doc: etree.ElementTree,
                schema_path: str = '/usr/share/psync/psync.xsd'):
    logging.debug(f'Loading XML schema "{schema_path}".')
    xmlschema = etree.XMLSchema(etree.parse(schema_path))
    if not xmlschema.validate(doc):
        logging.error(f'Not valid XML.')
        print(f'XML file "{path}" not valid.', file=sys.stderr)
        xmlschema.assertValid(doc)
        sys.exit(1)
    else:
        logging.debug(f'Valid XML.')


def parse(path: str, target: Optional[str] = None, **kwargs) -> \
        Tuple[Dict[int, str], List[Source], List[MySQL], List[PostgreSQL],
              Dict[int, Script]]:
    doc = load(path)
    check_valid(path, doc)

    as_root = kwargs['as_root'] if 'as_root' in kwargs else False
    rsync_config = kwargs['rsync_config'] if 'rsync_config' in kwargs else None

    if 'rsync_config' not in kwargs and \
            doc.find('p:options/p:rsync', namespaces=NAMESPACE) is not None:
        e = doc.find('p:options/p:rsync', namespaces=NAMESPACE)
        rsync_config = e.text.strip()
        if 'as_root' not in kwargs and 'root' in e.attrib:
            as_root = to_bool(e.attrib['root'].strip(), False)

    if target is None and \
            doc.find('p:options/p:target', namespaces=NAMESPACE) is not None:
        target = doc.find('p:options/p:target',
                          namespaces=NAMESPACE).text.strip()

    mysqls: List[MySQL] = []
    for e in doc.xpath('p:databases/p:mysql/*', namespaces=NAMESPACE):
        mysqls.append(MySQL.from_xml(e, target))

    pgsqls: List[PostgreSQL] = []
    for e in doc.xpath('p:databases/p:postgresql/*', namespaces=NAMESPACE):
        pgsqls.append(PostgreSQL.from_xml(e, target))

    scripts: Dict[int, Script] = {}
    for e in doc.xpath('p:scripts/p:script', namespaces=NAMESPACE):
        scripts[int(e.attrib['id'].strip())] = Script(e.text.strip())

    sources: List[Source] = []
    for e in doc.xpath('p:sources/p:source', namespaces=NAMESPACE):
        sources.append(Source.from_xml(e, target, rsync_config, as_root))

    pipeline: Dict[int, str] = {}
    for step in doc.xpath('p:pipeline/*', namespaces=NAMESPACE):
        pipeline[int(step.attrib['no'].strip())] = step.text.strip()

    for e in doc.xpath('p:databases/p:file', namespaces=NAMESPACE):
        values = parse(e.text.strip(), target)
        sources += values[1]
        mysqls += values[2]
        pgsqls += values[3]

    for e in doc.xpath('p:sources/p:file', namespaces=NAMESPACE):
        values = parse(e.text.strip(), target, rsync_config=rsync_config,
                       as_root=to_bool(e.attrib['root'], False)
                       if 'root' in e.attrib else as_root)
        sources += values[1]
        mysqls += values[2]
        pgsqls += values[3]

    return pipeline, sources, mysqls, pgsqls, scripts


def snapshot(sources: List[Source]):
    base_dirs: Dict[str, bool] = {}
    for source in sources:
        base_dir = os.path.join(source.target, source.hostname)
        if base_dir not in base_dirs:
            base_dirs[base_dir] = source.as_root
        elif not base_dirs[base_dir]:
            base_dirs[base_dir] = source.as_root

    for base_dir, as_root in base_dirs.items():
        logging.info(f'Taking snapshot of: {base_dir}')
        print(f'Taking snapshot of: {base_dir}')

        snapshot_dir = os.path.join(base_dir, 'snapshots')
        if not os.path.exists(snapshot_dir):
            os.makedirs(snapshot_dir)
        tar = Script(f'{"sudo " if as_root else ""}' +
                     f'tar -czf "{snapshot_dir}/{timestamp()}.tar.gz" ' +
                     f'"{os.path.join(base_dir, "files", "*")}"')
        tar.run()


if __name__ == '__main__':
    parser = ArgumentParser(prog='psync', formatter_class=RawTextHelpFormatter)
    parser.add_argument('-V', '--version', action='version',
                        version=((
                            '###########################################\n' +
                            '#                  psync                  #\n' +
                            '#           python rsync wrapper          #\n' +
                            '#                                         #\n' +
                            f'#{center_text(f"v{__version__}")}#\n' +
                            f'#{center_text(__license__)}#\n' +
                            '#                                         #\n' +
                            f'#{center_text(__author__)}#\n' +
                            f'#{center_text(__email__)}#\n' +
                            '#                                         #\n' +
                            f'#{center_text(__github__)}#\n' +
                            '###########################################')))
    parser.add_argument('-t', '--target', help='Backup target')
    parser.add_argument('-x', '--xml', dest='xml', help='XML config file')
    parser.add_argument('--is-valid', action='store_true', dest='check_valid',
                        help='checks the given xml file on valid')
    parser.add_argument('-d', '--no-database', action='store_true',
                        dest='database', help='Disables database dumps')
    parser.add_argument('-p', '--no-postgres', action='store_true',
                        dest='postgres', help='Disables PostgreSQL dumps')
    parser.add_argument('-m', '--no-mysql', action='store_true',
                        dest='mysql', help='Disables MySQL dumps')
    parser.add_argument('-s', '--snapshot', action='store_true',
                        dest='snapshot', help='Make a snapshot')
    parser.add_argument('-v', '--verbose', help='Verbose output.',
                        action='store_true')
    parser.add_argument('-f', '--log-format', help='Logging format.',
                        default='%(asctime)s %(levelname)s %(message)s')
    parser.add_argument('-n', '--notify', action='store_true',
                        help='Send notifications for pipeline steps.')
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(filename=f'psync-{timestamp()}.log',
                            format=args.log_format, level=logging.DEBUG)
    else:
        logging.basicConfig(filename=f'psync-{timestamp()}.log',
                            format=args.log_format, level=logging.INFO)
    if args.notify:
        try:
            notify2.init('psync')
        except NameError as e:
            pass

    pipeline: Dict[int, str] = {}
    if args.xml is not None:
        if args.check_valid:
            check_valid(args.xml, load(args.xml))
            print(f'XML file {args.xml} is valid.')
            sys.exit(0)
        else:
            pipeline, sources, mysqls, pgsqls, scripts = parse(args.xml,
                                                               args.target)
    else:
        parser.print_usage()

    for k, v in sorted(pipeline.items(), key=lambda x: x[0]):
        if args.notify:
            send_notification(f'Starting with {v} step.')

        if v == 'backup':
            for source in sources:
                if args.notify:
                    send_notification(f'Starting backup of {source.path}')
                source.backup()
        elif v == 'postgresql-dbs' and not (args.postgres or args.database):
            for pgsql in pgsqls:
                pgsql.backup()
        elif v == 'mysql-dbs' and not (args.mysql or args.database):
            for mysql in mysqls:
                mysql.backup()
        elif v.startswith('script-'):
            logging.info(f'Running script {scripts[int(v[7:])].path}.')
            scripts[int(v[7:])].run()

    if args.snapshot:
        if args.notify:
            send_notification('Taking snapshot.')
        snapshot(sources)
