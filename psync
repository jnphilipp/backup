#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: ft=python fileencoding=utf-8 sts=4 sw=4 et:
# Copyright (C) 2019-2021 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
"""Python wrapper for rsync to easily configure rsync.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import gzip
import logging
import os
import re
import shlex
import socket
import subprocess
import sys
import time

from argparse import ArgumentParser, FileType, RawTextHelpFormatter
from dataclasses import dataclass, field
from lxml import etree
from threading import Thread
from typing import Dict, List, Optional, Set, TextIO, Tuple, Type, TypeVar, Union

try:
    import notify2
except ImportError:
    pass

__author__ = "J. Nathanael Philipp (jnphilipp)"
__copyright__ = "Copyright 2019-2021 J. Nathanael Philipp (jnphilipp)"
__email__ = "nathanael@philipp.land"
__license__ = "GPLv3"
__version__ = "0.2.13"
__github__ = "https://github.com/jnphilipp/psync"


VERSION = (
    f"%(prog)s v{__version__}\n{__copyright__}\n"
    + "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>."
    + "\nThis is free software: you are free to change and redistribute it.\n"
    + "There is NO WARRANTY, to the extent permitted by law.\n\n"
    + f"Report bugs to {__github__}/issues."
    + f"\nWritten by {__author__} <{__email__}>"
)
NAMESPACE = {"p": "http://jnphilipp.org/psync/"}


@dataclass
class Database:
    """Dataclass for databases."""

    T = TypeVar("T", bound="Database", covariant=True)

    name: str
    user: str
    password: Optional[str] = None
    passwordstore: Optional[str] = None
    options: Optional[str] = None
    ssh: Optional[str] = None
    target: Optional[str] = None

    @classmethod
    def from_xml(cls: Type[T], e: etree.Element, default_target: Optional[str]) -> T:
        """Create database from xml.

        Args:
         * e: XML Element
         * default_target: default if not otherwise specified.

        Returns:
         * Instance of database.
        """
        db = cls(
            name=e.find("p:name", namespaces=NAMESPACE).text.strip(),
            user=e.find("p:user", namespaces=NAMESPACE).text.strip(),
        )

        if e.find("p:password", namespaces=NAMESPACE) is not None:
            db.password = e.find("p:password", namespaces=NAMESPACE).text.strip()
        if e.find("p:pass", namespaces=NAMESPACE) is not None:
            db.passwordstore = e.find("p:pass", namespaces=NAMESPACE).text.strip()
        if e.find("p:target", namespaces=NAMESPACE) is not None:
            db.target = e.find("p:target", namespaces=NAMESPACE).text.strip()
        else:
            db.target = default_target
        if e.find("p:options", namespaces=NAMESPACE) is not None:
            db.options = e.find("p:options", namespaces=NAMESPACE).text.strip()
        if e.find("p:ssh", namespaces=NAMESPACE) is not None:
            db.ssh = e.find("p:ssh", namespaces=NAMESPACE).text.strip()

        return db

    def _pass(self) -> Optional[str]:
        if self.passwordstore is None:
            return None

        logging.debug(f"Get password {self.passwordstore} from pass.")
        pobj = subprocess.Popen(["pass", self.passwordstore], stdout=subprocess.PIPE)
        return pobj.communicate()[0].decode("utf-8").split("\n")[0]

    def _run(
        self, args: List[str], env: Dict[str, str], target: str
    ) -> subprocess.Popen:
        with gzip.open(target, "wt", encoding="utf8") as f:
            pobj = subprocess.Popen(
                args,
                stdout=subprocess.PIPE,
                env=env,
                stderr=subprocess.PIPE,
                encoding="utf8",
            )

            assert pobj.stdout is not None

            for line in pobj.stdout:
                f.write(line)

            pobj.wait()
            return pobj

    def build_command_args(self) -> List[str]:
        """Build cmd command arguments."""
        raise NotImplementedError()

    def backup(self):
        """Make backup."""
        raise NotImplementedError()


@dataclass
class PostgreSQL(Database):
    """Dataclass for PostgreSQL databases."""

    def build_command_args(self) -> List[str]:
        """Build cmd command arguments."""
        if self.passwordstore is not None and self.ssh is not None:
            password = self._pass()
        elif self.password is not None and self.ssh is not None:
            password = self.password
        else:
            password = None

        if self.ssh is None:
            args: List[str] = []
        elif password is None:
            args = ["ssh", self.ssh]
        else:
            args = ["ssh", self.ssh, f"PGPASSWORD={password}"]
        args.append("pg_dump")
        args.append(f"--username={self.user}")
        if self.options is not None:
            args += self.options.split(" ")
        args.append(self.name)
        return args

    def backup(self):
        """Make backup."""
        if self.passwordstore is not None and self.ssh is None:
            env = {"PGPASSWORD": self._pass()}
        elif self.password is not None and self.ssh is None:
            env = {"PGPASSWORD": self.password}
        else:
            env = {}

        args = self.build_command_args()
        cmd = '" "'.join(
            ["PGPASSWORD" if a.startswith("PGPASSWORD") else a for a in args]
        )
        logging.info(f"Dumping PostgreSQL database {self.name}.")
        print(f"Dumping PostgreSQL database {self.name}.")
        logging.debug(f'Running PostgreSQL command: "{cmd}"')

        hostname = self.ssh if self.ssh is not None else socket.gethostname()
        path = os.path.join(hostname, "db-dumps", "PostgreSQL", self.name)
        if self.target is not None:
            path = os.path.join(self.target, path)
        if not os.path.exists(path):
            os.makedirs(path)

        path = os.path.join(path, f"{self.name}_{timestamp()}.sql.gz")
        logging.debug(f"Storing {self.name} dump in {path}.")

        pobj = self._run(args, env, path)
        if pobj.returncode != 0:
            err = pobj.stderr.read()
            logging.error(f"PostgreSQL {self.name} dump failed.")
            logging.error(err.strip())
            print(f"PostgreSQL {self.name} dump failed.", file=sys.stderr)
            print(err.strip(), file=sys.stderr)


@dataclass
class MySQL(Database):
    """Dataclass for MySQL databases."""

    def build_command_args(self) -> List[str]:
        """Build cmd command arguments."""
        if self.passwordstore is not None and self.ssh is not None:
            password = self._pass()
        elif self.password is not None and self.ssh is not None:
            password = self.password
        else:
            password = None

        if self.ssh is None:
            args: List[str] = []
        elif password is None:
            args = ["ssh", self.ssh]
        else:
            args = ["ssh", self.ssh, f"MYSQL_PWD={password}"]
        args.append("mysqldump")
        args.append(f"--user={self.user}")
        if self.options is not None:
            args += self.options.split(" ")
        args.append(self.name)
        return args

    def backup(self):
        """Make backup."""
        if self.passwordstore is not None and self.ssh is None:
            env = {"MYSQL_PWD": self._pass()}
        elif self.password is not None and self.ssh is None:
            env = {"MYSQL_PWD": self.password}
        else:
            env = {}

        args = self.build_command_args()
        cmd = '" "'.join(
            ["MYSQL_PWD" if a.startswith("MYSQL_PWD") else a for a in args]
        )
        logging.info(f"Dumping MySQL database {self.name}.")
        print(f"Dumping MySQL database {self.name}.")
        logging.debug(f'Running MySQL command: "{cmd}"')

        hostname = self.ssh if self.ssh is not None else socket.gethostname()
        path = os.path.join(hostname, "db-dumps", "MySQL", self.name)
        if self.target is not None:
            path = os.path.join(self.target, path)
        if not os.path.exists(path):
            os.makedirs(path)

        path = os.path.join(path, f"{self.name}_{timestamp()}.sql.gz")
        logging.debug(f"Storing {self.name} dump in {path}.")

        pobj = self._run(args, env, path)
        if pobj.returncode != 0:
            err = pobj.stderr.read()
            logging.error(f"MySQL {self.name} dump failed.")
            logging.error(err.strip())
            print(f"MySQL {self.name} dump failed.", file=sys.stderr)
            print(err.strip(), file=sys.stderr)


@dataclass
class Script:
    """Dataclass for scripts."""

    T = TypeVar("T", bound="Script")

    path: str
    cwd: Optional[str]

    def build_command_args(self) -> List[str]:
        """Build cmd command arguments."""
        return shlex.split(self.path)

    def run(self):
        """Run."""

        def log(stream, logger, writer):
            while True:
                line = stream.readline().decode()
                if line:
                    logger(line.split("\r")[-1].rstrip())
                    print(line, end="", file=writer)
                else:
                    break

        args = self.build_command_args()
        cmd = '" "'.join(args)
        logging.debug(f'Running: "{cmd}" with cwd={self.cwd}')

        pobj = subprocess.Popen(
            args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=self.cwd
        )

        t_stdout = Thread(target=log, args=(pobj.stdout, logging.info, sys.stdout))
        t_stderr = Thread(target=log, args=(pobj.stderr, logging.error, sys.stderr))

        t_stdout.start()
        t_stderr.start()

        while t_stdout.is_alive() and t_stderr.is_alive():
            pass
        pobj.wait()


@dataclass
class Source(Script):
    """Dataclass for sources."""

    T = TypeVar("T", bound="Source")

    target: str
    as_root: bool = False
    excludes: Set[str] = field(default_factory=set)
    rsync_config: Optional[str] = None
    pre_script: Optional[Script] = None
    post_script: Optional[Script] = None

    @property
    def hostname(self) -> str:
        """Get the hostnome either from self.path or from socket.gethostname.

        Returns:
         * hostname
        """
        match = re.match(r"^([^/]+@)?[^/]+:", self.path)
        if match:
            return match.group(0)[:-1]
        else:
            return socket.gethostname()

    @classmethod
    def from_xml(
        cls: Type[T],
        e: etree.Element,
        default_target: Optional[str],
        default_rsync_config: Optional[str],
        default_as_root: bool,
    ) -> T:
        """Create Source from xml.

        Args:
         * e: XML Element
         * default_target: default if not otherwise specified.
         * default_rsync_config: default rsync config if not otherwise specified.
         * default_as_root: default as root if not otherwise specified.

        Returns:
         * Instance of source.
        """
        path = e.find("p:path", namespaces=NAMESPACE).text.strip()
        if e.find("p:target", namespaces=NAMESPACE) is not None:
            source = cls(
                path=path,
                cwd=None,
                target=e.find("p:target", namespaces=NAMESPACE).text.strip(),
            )
        elif default_target is not None:
            source = cls(path=path, cwd=None, target=default_target)
        else:
            print(f"No target for source {path}.", file=sys.stderr)
            sys.exit(1)

        if e.find("p:exclude", namespaces=NAMESPACE) is not None:
            excludes = set()
            for exclude in e.iterfind("p:exclude", namespaces=NAMESPACE):
                excludes.add(exclude.text.strip())
            source.excludes = excludes

        if e.find("p:rsync", namespaces=NAMESPACE) is not None:
            e = e.find("p:rsync", namespaces=NAMESPACE)
            source.rsync_config = e.text.strip()
            if "root" in e.attrib:
                source.as_root = e.attrib["root"].strip()
        else:
            source.rsync_config = default_rsync_config
            source.as_root = default_as_root

        if e.find("p:pre_script", namespaces=NAMESPACE) is not None:
            path = e.find("p:pre_script", namespaces=NAMESPACE).text.strip()
            source.pre_script = Script(path=path, cwd=None)

        if e.find("p:post_script", namespaces=NAMESPACE) is not None:
            path = e.find("p:post_script", namespaces=NAMESPACE).text.strip()
            source.post_script = Script(path=path, cwd=None)

        return source

    def build_command_args(self) -> List[str]:
        """Build cmd command arguments."""
        match = re.match(r"^([^/]+@)?[^/]+:", self.path)
        if match:
            print(f"Remote source {self.path}.")
            logging.info(f"Remote source {self.path}.")
            path = re.sub(r"^([^/]+@)?[^/]+:", "", self.path)
        else:
            print(f"Local source {self.path}.")
            logging.info(f"Local source {self.path}.")
            if os.path.isdir(self.path):
                path = self.path
            else:
                path = os.path.dirname(self.path)
        if path.startswith("/"):
            path = path[1:]

        target = os.path.join(self.target, self.hostname, "files", path)
        backup_dir = os.path.join(self.target, self.hostname, "backup", path)

        if not os.path.exists(target):
            os.makedirs(target)

        if os.path.isdir(self.path) and not self.path.endswith("/"):
            self.path += "/"

        cmd = ["rsync"]
        if self.as_root:
            cmd = ["sudo"] + cmd
        if self.rsync_config is not None:
            if "--backup-dir=%s" in self.rsync_config:
                cmd += shlex.split(self.rsync_config % f'"{backup_dir}"')
            else:
                cmd += shlex.split(self.rsync_config)
        for exclude in self.excludes:
            cmd += [f"--exclude={exclude}"]
        return cmd + [self.path, target]

    def backup(self):
        """Make backup."""
        if self.pre_script is not None:
            logging.info(f"Run pre-script {self.pre_script.path}.")
            self.pre_script.run()
        self.run()
        if self.post_script is not None:
            logging.info(f"Run post-script {self.post_script.path}.")
            self.post_script.run()


def to_bool(string: str, default: bool = False) -> bool:
    """Convert string to bool.

    Args:
     * string: string to convert
     * default: default boolean if no match

    Returns:
     * boolean value
    """
    if string == "1" or string == "yes" or string == "true" or string == "on":
        return True
    elif string == "0" or string == "no" or string == "false" or string == "off":
        return False
    else:
        return default


def send_notification(msg: str):
    """Send a notification with notify2.

    Args:
     * msg: message of the notification
    """
    try:
        n = notify2.Notification("psync", msg, "psync")
        n.show()
    except NameError:
        pass


def timestamp() -> str:
    """Get current timestamp as string.

    Returns:
     * current timestamp in the format of "%Y%m%dT%H%M%S%z"
    """
    return time.strftime("%Y%m%dT%H%M%S%z", time.localtime())


def load(
    path: Union[str, TextIO], schema_path: str = "/usr/share/psync/psync.xsd"
) -> Optional[etree.ElementTree]:
    """Load XML and check validity.

    Args:
     * path: path to XML file

    Returns:
     * XML as etree.ElementTree if valid otherwise None
    """
    logging.debug(f'Loading XML file "{path if isinstance(path, str) else path.name}".')
    doc = etree.parse(path)

    logging.debug(f'Loading XML schema "{schema_path}".')
    xmlschema = etree.XMLSchema(etree.parse(schema_path))

    if not xmlschema.validate(doc):
        logging.error(
            f"XML file {path if isinstance(path, str) else path.name} is not valid."
        )
        logging.error(xmlschema.error_log.last_error)
        print(
            f'XML file "{path if isinstance(path, str) else path.name}" is not valid.',
            file=sys.stderr,
        )
        print(xmlschema.error_log.last_error)
        return None
    else:
        logging.debug(
            f"XML file {path if isinstance(path, str) else path.name} is valid."
        )
        return doc


def parse(
    path: Union[str, TextIO],
    target: Optional[str] = None,
    as_root: Optional[bool] = None,
    rsync_config: Optional[str] = None,
) -> Tuple[
    Dict[int, str], List[Source], List[MySQL], List[PostgreSQL], Dict[int, Script]
]:
    """Parse XML file.

    Args:
     * path: path to XML file to parse
     * target: optional target to use as default target
    """
    doc = load(path)
    if doc is None:
        sys.exit(1)

    if (
        rsync_config is None
        and doc.find("p:options/p:rsync", namespaces=NAMESPACE) is not None
    ):
        e = doc.find("p:options/p:rsync", namespaces=NAMESPACE)
        rsync_config = e.text.strip()
        if as_root is None and "root" in e.attrib:
            as_root = to_bool(e.attrib["root"].strip(), False)

    if (
        target is None
        and doc.find("p:options/p:target", namespaces=NAMESPACE) is not None
    ):
        target = doc.find("p:options/p:target", namespaces=NAMESPACE).text.strip()

    mysqls: List[MySQL] = []
    for e in doc.xpath("p:databases/p:mysql/*", namespaces=NAMESPACE):
        mysqls.append(MySQL.from_xml(e, target))

    pgsqls: List[PostgreSQL] = []
    for e in doc.xpath("p:databases/p:postgresql/*", namespaces=NAMESPACE):
        pgsqls.append(PostgreSQL.from_xml(e, target))

    scripts: Dict[int, Script] = {}
    for e in doc.xpath("p:scripts/p:script", namespaces=NAMESPACE):
        scripts[int(e.attrib["id"].strip())] = Script(path=e.text.strip(), cwd=None)

    sources: List[Source] = []
    for e in doc.xpath("p:sources/p:source", namespaces=NAMESPACE):
        sources.append(
            Source.from_xml(
                e, target, rsync_config, False if as_root is None else as_root
            )
        )

    pipeline: Dict[int, str] = {}
    for step in doc.xpath("p:pipeline/*", namespaces=NAMESPACE):
        pipeline[int(step.attrib["no"].strip())] = step.text.strip()

    for e in doc.xpath("p:databases/p:file", namespaces=NAMESPACE):
        values = parse(e.text.strip(), target)
        sources += values[1]
        mysqls += values[2]
        pgsqls += values[3]

    for e in doc.xpath("p:sources/p:file", namespaces=NAMESPACE):
        values = parse(
            e.text.strip(),
            target,
            rsync_config=rsync_config,
            as_root=to_bool(e.attrib["root"], False) if "root" in e.attrib else as_root,
        )
        sources += values[1]
        mysqls += values[2]
        pgsqls += values[3]

    return pipeline, sources, mysqls, pgsqls, scripts


def snapshot(sources: List[Source]):
    """Make a snapshot of a list of Sources and stores it in a tar.gz.

    Args:
     * sources: list of sources to include in the snapshot
    """
    base_dirs: Dict[str, bool] = {}
    for source in sources:
        base_dir = os.path.join(source.target, source.hostname)
        if base_dir not in base_dirs:
            base_dirs[base_dir] = source.as_root
        elif not base_dirs[base_dir]:
            base_dirs[base_dir] = source.as_root

    for base_dir, as_root in base_dirs.items():
        logging.info(f"Taking snapshot of: {base_dir}")
        print(f"Taking snapshot of: {base_dir}")

        snapshot_dir = os.path.join(base_dir, "snapshots")
        if not os.path.exists(snapshot_dir):
            os.makedirs(snapshot_dir)
        files_dir = os.path.join(base_dir, "files")
        tar = Script(
            f'{"sudo " if as_root else ""}tar -czf '
            + f'"{snapshot_dir}/{timestamp()}.tar.gz" '
            + f'{" ".join(os.listdir(files_dir))}',
            cwd=files_dir,
        )
        tar.run()


if __name__ == "__main__":
    parser = ArgumentParser(prog="psync", formatter_class=RawTextHelpFormatter)
    parser.add_argument(
        "-V",
        "--version",
        action="version",
        version=VERSION,
    )
    parser.add_argument("-t", "--target", help="Backup target")
    parser.add_argument(
        "--is-valid",
        action="store_true",
        dest="check_valid",
        help="checks the given xml file on valid",
    )
    parser.add_argument(
        "-d",
        "--no-database",
        action="store_true",
        dest="database",
        help="Disables database dumps",
    )
    parser.add_argument(
        "-p",
        "--no-postgres",
        action="store_true",
        dest="postgres",
        help="Disables PostgreSQL dumps",
    )
    parser.add_argument(
        "-m",
        "--no-mysql",
        action="store_true",
        dest="mysql",
        help="Disables MySQL dumps",
    )
    parser.add_argument(
        "-s",
        "--snapshot",
        action="store_true",
        dest="snapshot",
        help="Take a snapshot and store it in a tar.gz.",
    )
    parser.add_argument(
        "-S",
        "--snapshot-only",
        action="store_true",
        dest="snapshot_only",
        help="Don't make a backup, only take a snapshot.",
    )
    parser.add_argument(
        "-v", "--verbose", help="Verbose output.", action="count", default=0
    )
    parser.add_argument(
        "-f",
        "--log-format",
        help="Logging format.",
        default="%(asctime)s %(levelname)s %(message)s",
    )
    parser.add_argument(
        "-n",
        "--notify",
        action="store_true",
        help="Send notifications for pipeline steps.",
    )
    parser.add_argument(
        "XML",
        type=FileType("r", encoding="utf8"),
        default=sys.stdout,
        help="XML config file.",
    )
    args = parser.parse_args()

    if args.verbose == 0 and not args.check_valid:
        logging.basicConfig(
            filename=f"psync-{timestamp()}.log",
            format=args.log_format,
            level=logging.WARN,
        )
    elif args.verbose == 1 and not args.check_valid:
        logging.basicConfig(
            filename=f"psync-{timestamp()}.log",
            format=args.log_format,
            level=logging.INFO,
        )
    elif not args.check_valid:
        logging.basicConfig(
            filename=f"psync-{timestamp()}.log",
            format=args.log_format,
            level=logging.DEBUG,
        )

    if args.notify:
        try:
            notify2.init("psync")
        except NameError:
            args.notify = False

    pipeline: Dict[int, str] = {}
    if args.XML is not None:
        if args.check_valid:
            if load(args.XML) is not None:
                print(f"XML file {args.XML.name} is valid.")
            sys.exit(0)
        else:
            pipeline, sources, mysqls, pgsqls, scripts = parse(args.XML, args.target)
    else:
        parser.print_usage()

    if not args.snapshot_only:
        for k, v in sorted(pipeline.items(), key=lambda x: x[0]):
            if (
                (args.notify and v not in ["postgresql-dbs", "mysqls"])
                or (
                    args.notify
                    and v == "postgresql-dbs"
                    and not (args.postgres or args.database)
                )
                or (
                    args.notify
                    and v == "mysql-dbs"
                    and not (args.mysql or args.database)
                )
            ):
                send_notification(f"Starting with {v} step.")

            if v == "backup":
                for source in sources:
                    if args.notify:
                        send_notification(f"Starting backup of {source.path}")
                    source.backup()
            elif v == "postgresql-dbs" and not (args.postgres or args.database):
                for pgsql in pgsqls:
                    pgsql.backup()
            elif v == "mysql-dbs" and not (args.mysql or args.database):
                for mysql in mysqls:
                    mysql.backup()
            elif v.startswith("script-"):
                logging.info(f"Running script {scripts[int(v[7:])].path}.")
                scripts[int(v[7:])].run()

    if args.snapshot or args.snapshot_only:
        if args.notify:
            send_notification("Taking a snapshot.")
        snapshot(sources)
