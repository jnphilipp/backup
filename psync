#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
		This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import re
import socket
import sys
import time

from collections import OrderedDict
from configparser import ConfigParser
from gi.repository import Notify
from optparse import OptionParser
from xml.dom import minidom

class MultiOrderedDict(OrderedDict):
	def __setitem__(self, key, value):
		if isinstance(value, list) and key in self:
			self[key].extend(value)
		else:
			super(OrderedDict, self).__setitem__(key, value)

rsync_options = ''
backup_files = []
target = ''
pipeline = {}
postgres = []
mysql = []
pre_backup_script = ''
post_backup_script = ''

def send_notification(message):
	'''send feed updates to notify-osd'''
	try:
		pynotify.init('psync')
		notification = Notify.Notification.new(title, message, 'file://%s' % image if image else None)
		notification.show()
	except:
		print(message)

def load_xml(path):
	global rsync_options
	global target
	global backup_files
	global pipeline
	global pre_backup_script
	global post_backup_script

	xmldoc = minidom.parse(path)
	optionlist = xmldoc.getElementsByTagName('options')
	for s in optionlist:
		for child in s.childNodes:
			if child.firstChild != None:
				if child.attributes['name'].value == 'rsync_options' and child.firstChild != None:
					rsync_options = child.firstChild.data
				elif child.attributes['name'].value == 'target' and child.firstChild != None and target == None:
					target = child.firstChild.data
				elif child.attributes['name'].value == 'pre_backup_script' and child.firstChild != None:
					pre_backup_script = child.firstChild.data
				elif child.attributes['name'].value == 'post_backup_script' and child.firstChild != None:
					post_backup_script = child.firstChild.data

	backup_files_list = xmldoc.getElementsByTagName('backup_file')
	for s in backup_files_list:
		if s.firstChild != None:
			backup_file = {'source':s.firstChild.data.strip()}

			i = 0
			for child in s.childNodes:
				if child.nodeName == 'exclude':
					backup_file['exclude%d' % i] = child.firstChild.data.strip()
					i += 1
				elif child.nodeName == 'target':
					backup_file['target'] = child.firstChild.data.strip()
				elif child.nodeName == 'rsync_options':
					backup_file['rsync_options'] = child.firstChild.data.strip()
				elif child.nodeName == 'post_script':
					backup_file['post_script'] = child.firstChild.data.strip()

			backup_files.append(backup_file)

	pipelinelist = xmldoc.getElementsByTagName('pipe')
	for s in pipelinelist:
		pipeline[int(s.attributes['name'].value)] = s.firstChild.data
		if pipeline[int(s.attributes['name'].value)] == 'backup' and not target:
			print('No target provided.')
			sys.exit(1)

	databaseslist = xmldoc.getElementsByTagName('databases')
	for s in databaseslist:
		for child in s.childNodes:
			if child.nodeName == 'file':
				db_doc = minidom.parse(child.firstChild.data)
				load_xml_databases(db_doc)

	load_xml_databases(xmldoc)

	if len(pipeline) == 0:
		if target:
			pipeline[1] = 'backup'
		else:
			print('No target provided.')
			sys.exit(1)

def load_xml_databases(xmldoc):
	global postgres
	global mysql

	postgresqllist = xmldoc.getElementsByTagName('postgresql')
	for postgresql in postgresqllist:
		for s in postgresql.childNodes:
			if s.firstChild != None:
				db = dict()
				for child in s.childNodes:
					if child.nodeName == 'name':
						db['name'] = child.firstChild.data
					elif child.nodeName == 'user':
						db['user'] = child.firstChild.data
					elif child.nodeName == 'password':
						db['password'] = child.firstChild.data if child.firstChild != None else ''
					elif child.nodeName == 'target':
						db['target'] = child.firstChild.data
					elif child.nodeName == 'options':
						db['options'] = child.firstChild.data
					elif child.nodeName == 'ssh':
						db['ssh'] = child.firstChild.data
				postgres.append(db)

	mysqllist = xmldoc.getElementsByTagName('mysql')
	for m in mysqllist:
		for s in m.childNodes:
			if s.firstChild != None:
				db = dict()
				for child in s.childNodes:
					if child.nodeName == 'name':
						db['name'] = child.firstChild.data
					elif child.nodeName == 'user':
						db['user'] = child.firstChild.data
					elif child.nodeName == 'password':
						db['password'] = child.firstChild.data if child.firstChild != None else ''
					elif child.nodeName == 'target':
						db['target'] = child.firstChild.data
					elif child.nodeName == 'options':
						db['options'] = child.firstChild.data
					elif child.nodeName == 'ssh':
						db['ssh'] = child.firstChild.data
				mysql.append(db)

def load_properties(path):
	global rsync_options
	global target
	global backup_files
	global pipeline
	global postgres
	global mysql
	global pre_backup_script
	global post_backup_script
	global remote

	config = ConfigParser.RawConfigParser(dict_type=MultiOrderedDict)
	config.read([path])

	if config.has_section('options'):
		if config.has_option('options', 'target') and target == None:
			target = config.get('options', 'target')[0]
		if config.has_option('options', 'rsync_options'):
			rsync_options = config.get('options', 'rsync_options')[0]
		if config.has_option('options', 'pre_backup_script'):
			pre_backup_script = config.get('options', 'pre_backup_script')[0]
		if config.has_option('options', 'post_backup_script'):
			post_backup_script = config.get('options', 'post_backup_script')[0]

	i = 1
	while config.has_section('backup%d' % i):
		backup_file = {'source':config.get('backup%d' % i, 'source')[0]}

		if config.has_option('backup%d' % i, 'exclude'):
			excludes = (config.get('backup%d' % i, 'exclude'))
			j = 0
			for exclude in excludes:
				backup_file['exclude%d' % j] = exclude
				j += 1
		if config.has_option('backup%d' % i, 'target'):
			backup_file['target'] = config.get('backup%d' % i, 'target')[0]
		if config.has_option('backup%d' % i, 'rsync_options'):
			backup_file['rsync_options'] = config.get('backup%d' % i, 'rsync_options')[0]
		if config.has_option('backup%d' % i, 'post_script'):
			backup_file['post_script'] = config.get('backup%d' % i, 'post_script')[0]

		backup_files.append(backup_file)
		i += 1

	if config.has_section('options'):
		if config.has_option('options', 'target'):
			db_config = ConfigParser.RawConfigParser(dict_type=MultiOrderedDict)
			db_config.read([path])
			load_properties_databases(db_config)

	load_properties_databases(config)

	if config.has_section('pipeline'):
		i = 1
		while config.has_option('pipeline', str(i)):
			pipeline[i] = config.get('pipeline', str(i))[0]
			if pipeline[i] == 'backup' and not target:
				print('No target provided.')
				sys.exit(1)
			i += 1

	if len(pipeline) == 0:
		if target:
			pipeline[1] = 'backup'
		else:
			print('No target provided.')
			sys.exit(1)


def load_properties_databases(config):
	global postgres
	global mysql

	i = 1
	while config.has_section('postgresql%d' % i):
		db = dict()

		if config.has_option('db%d' % i, 'name'):
			db['name'] = config.get('db%d' % i, 'name')[0]
		if config.has_option('db%d' % i, 'user'):
			db['user'] = config.get('db%d' % i, 'user')[0]
		if config.has_option('db%d' % i, 'password'):
			db['password'] = config.get('db%d' % i, 'password')[0]
		if config.has_option('db%d' % i, 'options'):
			db['options'] = config.get('db%d' % i, 'options')[0]
		if config.has_option('db%d' % i, 'target'):
			db['target'] = config.get('db%d' % i, 'target')[0]
		if config.has_option('db%d' % i, 'ssh'):
			db['ssh'] = config.get('db%d' % i, 'ssh')[0]

		i += 1
		postgres.append(db)

	i = 1
	while config.has_section('mysql%d' % i):
		db = dict()

		if config.has_option('db%d' % i, 'name'):
			db['name'] = config.get('db%d' % i, 'name')[0]
		if config.has_option('db%d' % i, 'user'):
			db['user'] = config.get('db%d' % i, 'user')[0]
		if config.has_option('db%d' % i, 'password'):
			db['password'] = config.get('db%d' % i, 'password')[0]
		if config.has_option('db%d' % i, 'options'):
			db['options'] = config.get('db%d' % i, 'options')[0]
		if config.has_option('db%d' % i, 'target'):
			db['target'] = config.get('db%d' % i, 'target')[0]
		if config.has_option('db%d' % i, 'ssh'):
			db['ssh'] = config.get('db%d' % i, 'ssh')[0]

		i += 1
		mysql.append(db)


def backup():
	global rsync_options
	global target

	print('--------------------------------------------------------------------------------')
	hostname = socket.gethostname()

	for files in backup_files:
		send_notification('Start backup of "%s".' % files['source'])
		print('Backup of: %s' % files['source'])

		excludes = ''
		exclude = ''
		current_rsync_options = rsync_options
		current_target = target
		for key, value in files.items():
			if key.startswith('exclude'):
				excludes += value + ', '
				exclude += ' --exclude=' + value
			elif key == 'rsync_options':
				current_rsync_options = value
			elif key == 'target':
				current_target = value

		if len(excludes) > 0:
			print('Exclude: %s' % excludes[0:len(excludes) - 2])

		match = re.match(r'^([^/]+@)?[^/]+:', files['source'])
		if match:
			print('is remote: %s' % files['source'])
			current_target += '/%s' % re.sub(r'^([^/]+@)?[^/]+:', match.group(0)[:-1], files['source'])
		else:
			current_target += '/%s%s' % (hostname, files['source'])

		if not os.path.exists(current_target):
			os.makedirs(current_target)

		rsync = 'rsync %s %s %s %s' % (exclude, current_rsync_options, '%s/' % files['source'] if os.path.isdir(files['source']) else files['source'], current_target)
		print(rsync)
		os.system(rsync)

		if 'post_script' in files:
			send_notification('Start post script.')
			print('Start post script.')
			os.system(files['post_script'])
		print('--------------------------------------------------------------------------------')

def run_pre_backup_script():
	if not pre_backup_script:
		return

	print('--------------------------------------------------------------------------------')
	os.system(pre_backup_script)
	print('--------------------------------------------------------------------------------')

def run_post_backup_script():
	if not post_backup_script:
		return

	print('--------------------------------------------------------------------------------')
	send_notification('Start post backup script.')
	os.system(post_backup_script)
	print('--------------------------------------------------------------------------------')

def postgres_dump():
	global postgres
	global target

	print('--------------------------------------------------------------------------------')
	print('Start backup of PostgreSQL databases.')
	send_notification('Start backup of PostgreSQL databases.')

	timestamp = time.strftime('%Y-%m-%dT%H:%M:%S', time.localtime())
	for db in postgres:
		print('Backup of: %s' % db['name'])
		current_target = '%s/%s/DBDumps/PostgreSQL/%s' % (target, db['ssh'] if 'ssh' in db else socket.gethostname(), db['name'])
		if 'target' in db:
			current_target = db['target']

		if not os.path.exists(current_target):
			os.makedirs(current_target)

		os.system('%sPGPASSWORD=%s pg_dump --username=%s %s %s | gzip -c > %s' % ('ssh %s ' % db['ssh'] if 'ssh' in db else '', db['password'], db['user'], db['options'] if 'options' in db else '', db['name'], os.path.join(current_target, '%s_%s.sql.gz' % (db['name'], timestamp))))
	print('--------------------------------------------------------------------------------')

def mysql_dump():
	global mysql
	global target

	print('--------------------------------------------------------------------------------')
	print('Start backup of MySQL databases.')
	send_notification('Start backup of MySQL databases.')

	timestamp = time.strftime('%Y-%m-%dT%H:%M:%S', time.localtime())
	for db in mysql:
		print('Backup of: %s' % db['name'])
		current_target = '%s/%s/DBDumps/MySQL/%s' % (target, db['ssh'] if 'ssh' in db else socket.gethostname(), db['name'])
		if 'target' in db:
			current_target = db['target']

		if not os.path.exists(current_target):
			os.makedirs(current_target)

		os.system('%smysqldump --user=%s --password=%s %s %s | gzip -c > %s' % ('ssh %s ' % db['ssh'] if 'ssh' in db else '', db['user'], db['password'], db['options'] if 'options' in db else '', db['name'], os.path.join(current_target, '%s_%s.sql.gz' % (db['name'], timestamp))))
	print('--------------------------------------------------------------------------------')

def run():
	global pipeline
	global target

	usage = 'usage: %prog [options]'
	parser = OptionParser(usage)
	parser.add_option('-t', '--target', action='store', type='string', dest='target')
	parser.add_option('-x', '--xml', action='store', type='string', dest='xml')
	parser.add_option('-p', '--properties', action='store', type='string', dest='properties')
	parser.add_option('-d', '--no-database', action='store_true', dest='database', help='disables database dump')
	parser.add_option('-n', '--no-postgres', action='store_true', dest='postgres', help='disables PostgreSQL dump')
	parser.add_option('-m', '--no-mysql', action='store_true', dest='mysql', help='disables MySQL dump')
	(options, args) = parser.parse_args()

	if options.target != None:
		target = options.target
	if options.xml != None:
		load_xml(options.xml)
	elif options.properties != None:
		load_properties(options.properties)
	else:
		parser.print_help()

	for k, v in sorted(pipeline.items()):
		if v == 'backup':
			backup()
		elif v == 'db_dump' and not options.database:
			mysql_dump()
			postgres_dump()
		elif v == 'postgres_dump' and not (options.postgres and options.database):
			postgres_dump()
		elif v == 'mysql_dump' and not (options.postgres or options.database):
			mysql_dump()
		elif v == 'pre_backup_script':
			run_pre_backup_script()
		elif v == 'post_backup_script':
			run_post_backup_script()

if __name__ == '__main__':
	Notify.init('psync')
	run()